/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TensesRouteImport } from './routes/tenses'
import { Route as SeomRouteImport } from './routes/seom'
import { Route as ModalsRouteImport } from './routes/modals'
import { Route as GerundRouteImport } from './routes/gerund'
import { Route as ComparativeRouteImport } from './routes/comparative'
import { Route as AdaRouteImport } from './routes/ada'
import { Route as IndexRouteImport } from './routes/index'

const TensesRoute = TensesRouteImport.update({
  id: '/tenses',
  path: '/tenses',
  getParentRoute: () => rootRouteImport,
} as any)
const SeomRoute = SeomRouteImport.update({
  id: '/seom',
  path: '/seom',
  getParentRoute: () => rootRouteImport,
} as any)
const ModalsRoute = ModalsRouteImport.update({
  id: '/modals',
  path: '/modals',
  getParentRoute: () => rootRouteImport,
} as any)
const GerundRoute = GerundRouteImport.update({
  id: '/gerund',
  path: '/gerund',
  getParentRoute: () => rootRouteImport,
} as any)
const ComparativeRoute = ComparativeRouteImport.update({
  id: '/comparative',
  path: '/comparative',
  getParentRoute: () => rootRouteImport,
} as any)
const AdaRoute = AdaRouteImport.update({
  id: '/ada',
  path: '/ada',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/ada': typeof AdaRoute
  '/comparative': typeof ComparativeRoute
  '/gerund': typeof GerundRoute
  '/modals': typeof ModalsRoute
  '/seom': typeof SeomRoute
  '/tenses': typeof TensesRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/ada': typeof AdaRoute
  '/comparative': typeof ComparativeRoute
  '/gerund': typeof GerundRoute
  '/modals': typeof ModalsRoute
  '/seom': typeof SeomRoute
  '/tenses': typeof TensesRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/ada': typeof AdaRoute
  '/comparative': typeof ComparativeRoute
  '/gerund': typeof GerundRoute
  '/modals': typeof ModalsRoute
  '/seom': typeof SeomRoute
  '/tenses': typeof TensesRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/ada'
    | '/comparative'
    | '/gerund'
    | '/modals'
    | '/seom'
    | '/tenses'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/ada'
    | '/comparative'
    | '/gerund'
    | '/modals'
    | '/seom'
    | '/tenses'
  id:
    | '__root__'
    | '/'
    | '/ada'
    | '/comparative'
    | '/gerund'
    | '/modals'
    | '/seom'
    | '/tenses'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdaRoute: typeof AdaRoute
  ComparativeRoute: typeof ComparativeRoute
  GerundRoute: typeof GerundRoute
  ModalsRoute: typeof ModalsRoute
  SeomRoute: typeof SeomRoute
  TensesRoute: typeof TensesRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/tenses': {
      id: '/tenses'
      path: '/tenses'
      fullPath: '/tenses'
      preLoaderRoute: typeof TensesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/seom': {
      id: '/seom'
      path: '/seom'
      fullPath: '/seom'
      preLoaderRoute: typeof SeomRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/modals': {
      id: '/modals'
      path: '/modals'
      fullPath: '/modals'
      preLoaderRoute: typeof ModalsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/gerund': {
      id: '/gerund'
      path: '/gerund'
      fullPath: '/gerund'
      preLoaderRoute: typeof GerundRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/comparative': {
      id: '/comparative'
      path: '/comparative'
      fullPath: '/comparative'
      preLoaderRoute: typeof ComparativeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ada': {
      id: '/ada'
      path: '/ada'
      fullPath: '/ada'
      preLoaderRoute: typeof AdaRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdaRoute: AdaRoute,
  ComparativeRoute: ComparativeRoute,
  GerundRoute: GerundRoute,
  ModalsRoute: ModalsRoute,
  SeomRoute: SeomRoute,
  TensesRoute: TensesRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
